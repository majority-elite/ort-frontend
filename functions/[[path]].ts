import {
  createWorkersKVSessionStorage,
  createCookie,
} from '@remix-run/cloudflare';
import { createPagesFunctionHandler } from '@remix-run/cloudflare-pages';
import type { FetchApi } from '@/constants/types/api';
import type { AuthSession, AuthSessionData } from '@/constants/types/auth';
import { fetchApi } from '@/utils/api.server';

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore - the server build file is generated by `remix vite:build`
// eslint-disable-next-line import/no-unresolved, import/order
import * as build from '../build/server';

type ContextEnv = {
  readonly KV_NAMESPACE: KVNamespace<string>;
  readonly AUTH_COOKIE_SESSION_SECRET: string;
  readonly API_URL: string;
};

declare module '@remix-run/cloudflare' {
  interface AppLoadContext extends ContextEnv {
    authSession: AuthSession;
    fetchApi: FetchApi;
  }
}

export const onRequest = async (
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  context: EventContext<ContextEnv, any, any>,
): Promise<Response> => {
  const authSessionCookie = createCookie('__auth_session', {
    secrets: [context.env.AUTH_COOKIE_SESSION_SECRET],
    sameSite: true,
  });
  const authSessionStorage = createWorkersKVSessionStorage<AuthSessionData>({
    cookie: authSessionCookie,
    kv: context.env.KV_NAMESPACE,
  });
  const authSession = await authSessionStorage.getSession(
    context.request.headers.get('Cookie'),
  );

  const handleRequest = createPagesFunctionHandler<ContextEnv>({
    build,
    getLoadContext: ({ context: loadContext }) => ({
      ...loadContext.cloudflare.env,
      authSession,
      fetchApi: async (apiInfo, variables) =>
        fetchApi(
          apiInfo,
          variables,
          loadContext.cloudflare.env.API_URL,
          authSession,
        ),
    }),
  });

  const response = await handleRequest(context);

  response.headers.append(
    'Set-Cookie',
    await authSessionStorage.commitSession(authSession),
  );

  return response;
};
